#!/bin/bash

# Text constants
MAGENTA='\e[95m'
NC='\033[0m'
BOLD='\e[1m'
NORMAL='\e[21m'
RED='\e[91m'
EXIT='echo -e \e[91m\e[1m'

usage() {
    PROGRAMNAME=$0
    echo "usage: $PROGRAMNAME [command]"
    echo "Available Commands:"
    echo "  deploy      build cloud lab environment with Vulnhub machines"
    echo "  status      check status of cloud lab environment"
    echo "  destroy     destroy the cloud lab environment"
    exit 1
} # usage

set_aws_profiles() {
    # Select the AWS profiles to use with the lab
    if [[ -z $FFV_S3_PROFILE || -z $FFV_AMI_PROFILE ]] 
    then
	echo "What is the AWS profile with S3 permission?"
	echo -n "> "
	read S3_USER </dev/tty

	echo "What is the AWS profile with AMI upload permissions?"
	echo -n "> "
	read IMG_UPLOAD_USER </dev/tty

    else
	S3_USER=$FFV_S3_PROFILE
	IMG_UPLOAD_USER=$FFV_AMI_PROFILE
    fi


} # set_aws_profiles

set_aws_region() {
    # Select AWS region
    if [[ -z $FFV_REGION ]]
    then
	echo "What AWS region should the lab be deployed in?"
	aws ec2 describe-regions | grep RegionName | awk -F':' '{ sub(/^[ \t]+/, ""); print $2 }'	
	echo -n "> "
	read AWS_REGION </dev/tty
    else
	AWS_REGION=$FFV_REGION
    fi
} # set_aws_region

upload_image() {
    # Get function arguments
    FILE_NAME=$1
    FILE_TYPE=$2
    NOOVA_NAME=$3
    LOCATION=$4

    # Upload process begins here
    # Get file type
    if [[ $FILE_TYPE == "" ]]; then
	FILE_TYPE=$(echo $FILE_NAME | cut -d'.' -f 2)
    fi
    echo "File type detected: $FILE_TYPE"

    if [[ $LOCATION -eq 0 ]]
    then
	echo "Uploading to AWS..."
	aws s3 cp vulnhub_ovas/$FILE_NAME s3://vmstorage/ --profile $S3_USER

	# Check if upload cancelled, and if so, exit program
	if [[ $? -eq 1 ]]
	then
	    clean_up
	    echo "Upload failed. Exiting now..."
	    exit 1
	fi
    fi

    # Import image based on type of file it is
    # TODO: Add name tags, specify region
    aws ec2 import-image --description "$FILE_NAME" --disk-containers Format=$FILE_TYPE,UserBucket="{S3Bucket=vmstorage,S3Key=$FILE_NAME}" --profile $IMG_UPLOAD_USER --region $AWS_REGION > import_ami_task.txt

    AMI_TASK_ID=$(grep import import_ami_task.txt | cut -d'"' -f 4)
    echo "AMI_TASK_ID ID of the uploaded image: $AMI_TASK_ID"        

    # Loop and check when the upload process has completed
    # TODO: Check if upload failed and exit script
    FLAG=false
    START=$SECONDS
    while [ $FLAG != true ]
    do
	DURATION=$(( SECONDS - START ))
	echo "Checking for completion on image upload...  [ $DURATION seconds elapsed ]" 
	sleep 30

	aws ec2 describe-import-image-tasks --import-task-ids $AMI_TASK_ID > import_ami_task.txt
	
	# Check for failure
	FAILURE=$(grep deleting ./import_ami_task.txt | wc -l)
	if [[ $FAILURE > 0 ]]
	then
	    FAILURE_MSG=$(grep StatusMessage ./import_ami_task.txt)	    
	    clean_up
	    echo "Image is not compatible for the AWS Image Import process. Exiting now..."
	    echo "$FAILUREMSG"
	    echo "Removing downloaded file..."
	    rm ./vulnhub_ovas/$FILE_NAME
	    exit 1
	fi
	
	# Check for success
	check=$(grep completed ./import_ami_task.txt | wc -l)
	if [[ $check == 2 ]]
	then
	    FLAG=true
	    echo "Process has completed!"
	fi
    done

    # Apply to Terraform, should also build a .tf file with the new AMI uploaded
    if [[ $FILE_NAME =~ "." ]]
    then
	FILE_NAME=$NOOVA_NAME
    fi

    # Get the AMI ID of the image
    AMI_ID=$(grep ImageId import_ami_task.txt | cut -d'"' -f 4)
    echo "AMI Name of the uploaded image: $AMI_ID"
    
    VULN_PATH="./vulnerable_machines/$FILE_NAME"    
    SUFFIX=".tf"
    FINAL_PATH="$VULN_PATH$SUFFIX"
    echo -n """
# A Vulnhub machine on the network
resource \"aws_instance\" \"$FILE_NAME\" {
  ami                    = \"$AMI_ID\" # Custom AMI, uploaded using https://docs.amazonaws.cn/en_us/vm-import/latest/userguide/vm-import-ug.pdf
  instance_type          = var.instance_type
  key_name               = \"primary\"
  subnet_id              = aws_subnet.my_subnet.id
  vpc_security_group_ids = [aws_security_group.allow_vuln.id]

  tags = {
    Name = \"$FILE_NAME\"
  }
}
# Don't change the name of the output, will break Webapp :)
output \"$FILE_NAME\" {
  value = aws_instance.$FILE_NAME.private_ip
}

""" > $FINAL_PATH

    # Copy to main directory to be part of Terraform deploy
    cp $FINAL_PATH .

    echo "Vulnhub image successfully uploaded to AWS and ready for deployment!"
    
} # upload_image

clean_up() {
    ${EXIT}
    # Clean up all the files we create
    rm machine_choices.txt 2> /dev/null
    rm checksum.txt 2> /dev/null
    rm import_ami_task.txt 2> /dev/null
} # clean_up

deploy() {
    # Pick a vulnhub machine to deploy
    COUNTER=0
    MACHINES=$(find ./vulnerable_machines/ | cut -d'/' -f 3)
    echo "Pick a Vulnhub machine to deploy:"
    for MACHINE in $MACHINES
    do
	MACHINE=$(echo $MACHINE | cut -d'.' -f 1)
	if [[ -z "$MACHINE" ]]
	then
	    continue
	fi
	
	COUNTER=$((COUNTER+1))
	echo "($COUNTER) $MACHINE"
	echo "$COUNTER.$MACHINE" >> machine_choices.txt
    done

    COUNTER=$((COUNTER+1))
    echo "($COUNTER) Import local Vulnhub image"
    echo "$COUNTER.Import" >> machine_choices.txt

    COUNTER=$((COUNTER+1))
    echo "($COUNTER) Import remote Vulnhub image from AWS S3 bucket"
    echo "$COUNTER.S3" >> machine_choices.txt

    COUNTER=$((COUNTER+1))
    echo "($COUNTER) Use previously uploaded AMI from AWS"
    echo "$COUNTER.AMI" >> machine_choices.txt        

    # Default color and font
    echo -e "${NORMAL}${NC}"

    # read in the choice
    echo -n "> "
    read VULN_CHOICE

    # Loop through and find the machine the user selected
    while IFS= read -r line;
    do
	NUM=$(echo $line | cut -d'.' -f 1)
	if [[ $VULN_CHOICE =~ $NUM ]]
	then
	    SELECTED_MACHINE=$(echo $line | cut -d'.' -f 2)

	    # TODO: Add import functionality
	    # To import an image, store the image in ./vulnhub_ovas/ directory
	    if [[ $SELECTED_MACHINE =~ "Import" ]]
	    then
		echo "What file do you want to import?"
		echo -n "> "
		read IMPORT_FILE </dev/tty
		IMPORT_NAME=$(echo $IMPORT_FILE | cut -d'.' -f 1)	    
		IMPORT_FILE_TYPE=$(echo $IMPORT_FILE | cut -d'.' -f 2)
		set_aws_profiles
		set_aws_region		
		upload_image $IMPORT_FILE $IMPORT_FILE_TYPE $IMPORT_NAME 0
	    elif [[ $SELECTED_MACHINE =~ "S3" ]]
	    then
		set_aws_profiles
		set_aws_region		
		echo "Listing contents of s3://vmstorage/ ..."
		aws s3 ls s3://vmstorage/ --profile $S3_USER | grep ova | cut -d" " -f 4
		echo "What file do you want to import?"
		echo -n "> "
		read IMPORT_FILE </dev/tty
		IMPORT_NAME=$(echo $IMPORT_FILE | cut -d'.' -f 1)	    
		IMPORT_FILE_TYPE=$(echo $IMPORT_FILE | cut -d'.' -f 2)		
		upload_image $IMPORT_FILE $IMPORT_FILE_TYPE $IMPORT_NAME 1
	    # TODO: Improve JSON parsing
	    elif [[ $SELECTED_MACHINE =~ "AMI" ]]
	    then
		set_aws_profiles
		set_aws_region		
		# List out available AMI's
		echo "Listing available AMI's from your profile...."
		aws ec2 describe-images --profile $IMG_UPLOAD_USER --region $AWS_REGION --owners self | grep "Tags" -A 5 | grep Value | cut -d"\"" -f 4

		# Get AMI to use
		echo "What AMI do you want to import?"
		echo -n "> "
		read AMI_CHOICE </dev/tty		
		AMI_CHOICE_IMAGEID=$(aws ec2 describe-images --profile $IMG_UPLOAD_USER --region $AWS_REGION --owners self | grep "$AMI_CHOICE" -B32 | grep ImageId | cut -d"\"" -f 4)

		FINAL_PATH="./vulnerable_machines/$AMI_CHOICE.tf"
		echo -n """
# A Vulnhub machine on the network
resource \"aws_instance\" \"$AMI_CHOICE\" {
  ami                    = \"$AMI_CHOICE_IMAGEID\" # Custom AMI, uploaded using https://docs.amazonaws.cn/en_us/vm-import/latest/userguide/vm-import-ug.pdf
  instance_type          = var.instance_type
  key_name               = \"primary\"
  subnet_id              = aws_subnet.my_subnet.id
  vpc_security_group_ids = [aws_security_group.allow_vuln.id]

  tags = {
    Name = \"$AMI_CHOICE\"
  }
}
# Don't change the name of the output, will break Webapp :)
output \"$AMI_CHOICE\" {
  value = aws_instance.$AMI_CHOICE.private_ip
}

""" > $FINAL_PATH

		# Copy to main directory to be part of Terraform deploy
		cp $FINAL_PATH .

		echo "Ready to deploy AMI $AMI_CHOICE!"
	    else
		set_aws_region
		cp vulnerable_machines/$SELECTED_MACHINE.tf .
		echo "Adding $SELECTED_MACHINE to lab build..."
	    fi
	fi
    done < machine_choices.txt

    # Select the SSH keypair to use with this lab
    # First check to see if the ssh keypair has been declared as an environmental variable
    if [[ -z $FFV_PRIV_KEY || -z $FFV_PUB_KEY ]] # if either private or public has not been declared...
    then
	# Then the keypair needs to be declared...
	echo "What is the absolute path to the SSH private key to use with this lab?"
	echo -n "> "
	read SSH_PRIV_KEY_PATH </dev/tty

	# Test to see if that file exists and is a valid SSH key
	ssh-keygen -l -f $SSH_PRIV_KEY_PATH
	if [[ $? -ne 0 ]]
	then
	    clean_up
	    echo "Exiting now..."
	    exit 1
	fi


	echo "What is the absolute path to the SSH public key to use with this lab?"
	echo -n "> "
	read SSH_PUB_KEY_PATH </dev/tty

	# Test to see if that file exists and is a valid SSH key
	ssh-keygen -l -f $SSH_PUB_KEY_PATH
	if [[ $? -ne 0 ]]
	then
	    clean_up
	    echo "Exiting now..."
	    exit 1
	fi
    else
	SSH_PRIV_KEY_PATH=$FFV_PRIV_KEY
	SSH_PUB_KEY_PATH=$FFV_PUB_KEY    
    fi

    # Create the provider.tf

    echo -n """
provider \"aws\" {
    region = \"$AWS_REGION\"
}	 
""" > provider.tf

    echo "Building machine now..."

    terraform apply -var="private_key_path=$SSH_PRIV_KEY_PATH" -var="public_key_path=$SSH_PUB_KEY_PATH"

    if [[ $? -eq 0 ]]
    then
	terraform output -json > instance_ips.txt
	
	# Get the public IP of the PiVPN server
	VPN_PUB_IP=$(grep -A 3 PiVPN instance_ips.txt | grep value | cut -d"\"" -f 4)
	
	# Give the web app the correct VPC private ips
	echo yes | scp  -i "$SSH_PRIV_KEY_PATH" instance_ips.txt ubuntu@$VPN_PUB_IP:/home/ubuntu/ 

	# Start the web app! Hosted on port 7894
	echo "Now starting web application..."
	ssh -i "$SSH_PRIV_KEY_PATH" ubuntu@$VPN_PUB_IP "export FLASK_APP=/home/ubuntu/app.py && flask run -h 0.0.0.0 -p 7894"
    else
	clean_up
	echo "Terraform deployment failed. Now exiting..."
	exit 1
    fi
} # deploy

status() {
    terraform show
} # status

destroy() {
    terraform destroy
    if [[ $? -eq 0 ]]
    then
	clean_up
	VULNS=$(find . | grep tf | grep -v -E 'vulnerable_machines|tfstate|main|vars|env|vpn|provider')
	rm $VULNS
    fi
    rm instance_ips.txt 2> /dev/null    
} # destroy

banner() {
    clean_up
    echo -e "${MAGENTA}${BOLD}farfromVULN"
    cat farfromVULN.logo
} # banner


# Check command line arguments
if [[ -z $1 ]]
then
    usage
elif [[ $1 == "deploy" ]]
then
    banner
    deploy
elif [[ $1 == "status" ]]
then
    banner
    status
elif [[ $1 == "destroy" ]]
then
    banner
    destroy    
fi




