# From https://raw.githubusercontent.com/3ndG4me/Offensive-Security-Engineering-Udemy/master/base-vpn/vpn.tf
data "aws_ami" "ubuntu" {
  most_recent = "true"
  filter {
    name   = "name"
    values = ["ffv-ubuntu*"]
  }
  owners = ["self"]
}


# Put your IP here to whitelist it for ssh

variable "access_addr" {
    type    = string
    default = "0.0.0.0/0"

}

resource "aws_security_group" "vpn_group" {
  name        = "vpn_group"
  description = "Allow Ports for VPN and SSH access"
  vpc_id = aws_vpc.{{ cloud_name }}.id

  # Open the default OpenVPN Port
  ingress {
    from_port   = 1194
    to_port     = 1194
    protocol    = "udp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Open the webserver port
  ingress {
    from_port   = 7894
    to_port     = 7894
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # ssh for remote access, might want to lock down to your IP prior to rolling out
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = [var.access_addr]
  }

  # Allow traffic from the VPC
  ingress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["10.0.0.0/16"]
  }  

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}


resource "aws_instance" "primary_vpn" {
  ami             = data.aws_ami.ubuntu.id
  instance_type   = var.instance_type
  subnet_id              = aws_subnet.my_subnet.id  
  vpc_security_group_ids = [aws_security_group.vpn_group.id]
  key_name        = "{{ cloud_name }}"
  
  tags = {
    Name = "Primary vpn"
  }
}

# Don't change the name of the output, will break Webapp :)
output "PiVPN" {
  value = aws_instance.primary_vpn.public_ip
}
